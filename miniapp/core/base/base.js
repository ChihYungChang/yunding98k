"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toComponent = exports.BaseComponent = exports.BasePage = void 0;
const util_1 = require("../util");
const util_common_1 = require("../../utils/util.common");
const util_date_1 = require("../../utils/util.date");
const util_router_1 = require("../../utils/util.router");
const index_1 = require("../../api/index");
class BasePage {
    constructor() {
        this.app = getApp();
        this.data = {
            isIpx: this.app.globalData.phoneInfo.isIpx
        };
        this.$router = util_router_1.default;
        this.$util = {
            common: util_common_1.default,
            date: util_date_1.default
        };
        this.$api = index_1.default;
    }
}
exports.BasePage = BasePage;
class BaseComponent {
    constructor() {
        this.app = getApp();
        this.data = {
            isIpx: this.app.globalData.phoneInfo.isIpx
        };
        this.$router = util_router_1.default;
        this.$util = {
            common: util_common_1.default,
            date: util_date_1.default
        };
        this.$api = index_1.default;
    }
}
exports.BaseComponent = BaseComponent;
const RAW_LIFE_CYCLES = ['Created', 'Attached', 'Ready', 'Moved', 'Detached'];
const NATIVE_LIFE_CYCLES = RAW_LIFE_CYCLES.map((k) => k.toLowerCase());
const COMPONENT_NATIVE_PROPS = [
    'externalClasses',
    'properties',
    'data',
    'options',
    'relations',
    'behaviors'
];
function toComponent(options = {}) {
    if (options.properties) {
        Object.keys(options.properties).forEach((k) => {
            let opt = options.properties[k];
            if (!util_1.isPlainObject(opt)) {
                opt = { type: opt };
            }
            options.properties[k] = opt;
        });
    }
    if (!options.methods)
        options.methods = {};
    const inits = {};
    Object.getOwnPropertyNames(options).forEach((k) => {
        const desc = Object.getOwnPropertyDescriptor(options, k);
        if (!desc)
            return;
        if (NATIVE_LIFE_CYCLES.indexOf(k) < 0 && typeof desc.value === 'function') {
            Object.defineProperty(options.methods, k, desc);
            delete options[k];
        }
        else if (COMPONENT_NATIVE_PROPS.indexOf(k) < 0) {
            inits[k] = desc;
        }
    });
    if (Object.keys(inits).length) {
        const oldCreated = options.created;
        options.created = function () {
            Object.defineProperties(this, inits);
            if (oldCreated)
                oldCreated.apply(this, arguments);
        };
    }
    return options;
}
exports.toComponent = toComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImJhc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0NBQXdDO0FBRXhDLHlEQUFrRTtBQUNsRSxxREFBNEQ7QUFDNUQseURBQThDO0FBRTlDLDJDQUE0QztBQW1CNUMsTUFBYSxRQUFRO0lBUW5CO1FBQ0UsSUFBSSxDQUFDLEdBQUcsR0FBRyxNQUFNLEVBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHO1lBQ1YsS0FBSyxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxLQUFLO1NBQzNDLENBQUM7UUFDRixJQUFJLENBQUMsT0FBTyxHQUFHLHFCQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLEtBQUssR0FBRztZQUNYLE1BQU0sRUFBRSxxQkFBVTtZQUNsQixJQUFJLEVBQUUsbUJBQVE7U0FDZixDQUFDO1FBQ0YsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFHLENBQUM7SUFDbEIsQ0FBQztDQUNGO0FBcEJELDRCQW9CQztBQVdELE1BQWEsYUFBYTtJQVF4QjtRQUNFLElBQUksQ0FBQyxHQUFHLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLElBQUksR0FBRztZQUNWLEtBQUssRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsS0FBSztTQUMzQyxDQUFDO1FBQ0YsSUFBSSxDQUFDLE9BQU8sR0FBRyxxQkFBTyxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDWCxNQUFNLEVBQUUscUJBQVU7WUFDbEIsSUFBSSxFQUFFLG1CQUFRO1NBQ2YsQ0FBQztRQUNGLElBQUksQ0FBQyxJQUFJLEdBQUcsZUFBRyxDQUFDO0lBQ2xCLENBQUM7Q0FDRjtBQXBCRCxzQ0FvQkM7QUFFRCxNQUFNLGVBQWUsR0FBRyxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztBQUM5RSxNQUFNLGtCQUFrQixHQUFHLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLE1BQU0sc0JBQXNCLEdBQUc7SUFDN0IsaUJBQWlCO0lBQ2pCLFlBQVk7SUFDWixNQUFNO0lBQ04sU0FBUztJQUNULFdBQVc7SUFDWCxXQUFXO0NBQ1osQ0FBQztBQUNGLFNBQWdCLFdBQVcsQ0FBQyxVQUFlLEVBQUU7SUFDM0MsSUFBSSxPQUFPLENBQUMsVUFBVSxFQUFFO1FBQ3RCLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO1lBQzVDLElBQUksR0FBRyxHQUFRLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsSUFBSSxDQUFDLG9CQUFhLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3ZCLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQzthQUNyQjtZQUNELE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU87UUFBRSxPQUFPLENBQUMsT0FBTyxHQUFHLEVBQVMsQ0FBQztJQUNsRCxNQUFNLEtBQUssR0FBMEMsRUFBRSxDQUFDO0lBQ3hELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNoRCxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxJQUFJO1lBQUUsT0FBTztRQUNsQixJQUFJLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTtZQUN6RSxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2hELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25CO2FBQU0sSUFBSSxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2hELEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUM7U0FDakI7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEVBQUU7UUFDN0IsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLE9BQWMsQ0FBQztRQUMxQyxPQUFPLENBQUMsT0FBTyxHQUFHO1lBQ2hCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFckMsSUFBSSxVQUFVO2dCQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQztLQUNIO0lBQ0QsT0FBTyxPQUFPLENBQUM7QUFDakIsQ0FBQztBQS9CRCxrQ0ErQkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi4vdXRpbCc7XG5pbXBvcnQgeyBJUm91dGVyVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwucm91dGVyJztcbmltcG9ydCBjb21tb25VdGlsLCB7IElDb21tb25VdGlsIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbC5jb21tb24nO1xuaW1wb3J0IGRhdGVVdGlsLCB7IElEYXRlVXRpbCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWwuZGF0ZSc7XG5pbXBvcnQgJHJvdXRlciBmcm9tICcuLi8uLi91dGlscy91dGlsLnJvdXRlcic7XG5pbXBvcnQgeyBhcHBJbnRlcmZhY2UsIFNoYXJlT3B0aW9ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IGFwaSwgeyBJQXBpIH0gZnJvbSAnLi4vLi4vYXBpL2luZGV4JztcblxuZGVjbGFyZSB0eXBlIElBbnlPYmplY3QgPSBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VQYWdlUHJvcHNcbiAgZXh0ZW5kcyBXZWNoYXRNaW5pcHJvZ3JhbS5QYWdlLkluc3RhbmNlUHJvcGVydGllcyB7XG4gIG9wdGlvbnM6IElBbnlPYmplY3Q7XG4gIGRhdGE6IGFueTtcbiAgdXJsPzogc3RyaW5nO1xufVxuZXhwb3J0IGludGVyZmFjZSBCYXNlUGFnZVxuICBleHRlbmRzIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuSUxpZmV0aW1lLFxuICAgIFdlY2hhdE1pbmlwcm9ncmFtLlBhZ2UuSW5zdGFuY2VNZXRob2RzPGFueT4sXG4gICAgQmFzZVBhZ2VQcm9wcyB7XG4gIC8qKiDorr7nva7lsI/nqIvluo/pobXpnaLliIbkuqvphY3nva4gKi9cbiAgJHNldFNoYXJlQXBwTWVzc2FnZShvcHRpb25zOiBTaGFyZU9wdGlvbnMpOiB2b2lkO1xuICBbeDogc3RyaW5nXTogYW55O1xufVxuXG5leHBvcnQgY2xhc3MgQmFzZVBhZ2Uge1xuICByZWFkb25seSBhcHA6IGFwcEludGVyZmFjZTtcbiAgJHV0aWw6IHtcbiAgICBjb21tb246IElDb21tb25VdGlsO1xuICAgIGRhdGU6IElEYXRlVXRpbDtcbiAgfTtcbiAgJHJvdXRlcjogSVJvdXRlclV0aWw7XG4gICRhcGk6IElBcGk7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuYXBwID0gZ2V0QXBwKCk7XG4gICAgdGhpcy5kYXRhID0ge1xuICAgICAgaXNJcHg6IHRoaXMuYXBwLmdsb2JhbERhdGEucGhvbmVJbmZvLmlzSXB4XG4gICAgfTtcbiAgICB0aGlzLiRyb3V0ZXIgPSAkcm91dGVyO1xuICAgIHRoaXMuJHV0aWwgPSB7XG4gICAgICBjb21tb246IGNvbW1vblV0aWwsXG4gICAgICBkYXRlOiBkYXRlVXRpbFxuICAgIH07XG4gICAgdGhpcy4kYXBpID0gYXBpO1xuICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZUNvbXBvbmVudFxuICBleHRlbmRzIFdlY2hhdE1pbmlwcm9ncmFtLkNvbXBvbmVudC5MaWZldGltZXMsXG4gICAgV2VjaGF0TWluaXByb2dyYW0uQ29tcG9uZW50Lk90aGVyT3B0aW9uLFxuICAgIFdlY2hhdE1pbmlwcm9ncmFtLkNvbXBvbmVudC5JbnN0YW5jZU1ldGhvZHM8YW55PiB7XG4gIHByb3BlcnRpZXM6IFdlY2hhdE1pbmlwcm9ncmFtLkNvbXBvbmVudC5Qcm9wZXJ0eU9wdGlvbjtcbiAgZGF0YTogYW55O1xuICBtZXRob2RzOiBSZWNvcmQ8c3RyaW5nLCAoLi4uYXJnczogYW55W10pID0+IGFueT47XG4gIFt4OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgY2xhc3MgQmFzZUNvbXBvbmVudCB7XG4gIHJlYWRvbmx5IGFwcDogYXBwSW50ZXJmYWNlO1xuICAkdXRpbDoge1xuICAgIGNvbW1vbjogSUNvbW1vblV0aWw7XG4gICAgZGF0ZTogSURhdGVVdGlsO1xuICB9O1xuICAkcm91dGVyOiBJUm91dGVyVXRpbDtcbiAgJGFwaTogSUFwaTtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5hcHAgPSBnZXRBcHAoKTtcbiAgICB0aGlzLmRhdGEgPSB7XG4gICAgICBpc0lweDogdGhpcy5hcHAuZ2xvYmFsRGF0YS5waG9uZUluZm8uaXNJcHhcbiAgICB9O1xuICAgIHRoaXMuJHJvdXRlciA9ICRyb3V0ZXI7XG4gICAgdGhpcy4kdXRpbCA9IHtcbiAgICAgIGNvbW1vbjogY29tbW9uVXRpbCxcbiAgICAgIGRhdGU6IGRhdGVVdGlsXG4gICAgfTtcbiAgICB0aGlzLiRhcGkgPSBhcGk7XG4gIH1cbn1cblxuY29uc3QgUkFXX0xJRkVfQ1lDTEVTID0gWydDcmVhdGVkJywgJ0F0dGFjaGVkJywgJ1JlYWR5JywgJ01vdmVkJywgJ0RldGFjaGVkJ107XG5jb25zdCBOQVRJVkVfTElGRV9DWUNMRVMgPSBSQVdfTElGRV9DWUNMRVMubWFwKChrKSA9PiBrLnRvTG93ZXJDYXNlKCkpO1xuY29uc3QgQ09NUE9ORU5UX05BVElWRV9QUk9QUyA9IFtcbiAgJ2V4dGVybmFsQ2xhc3NlcycsXG4gICdwcm9wZXJ0aWVzJyxcbiAgJ2RhdGEnLFxuICAnb3B0aW9ucycsXG4gICdyZWxhdGlvbnMnLFxuICAnYmVoYXZpb3JzJ1xuXTtcbmV4cG9ydCBmdW5jdGlvbiB0b0NvbXBvbmVudChvcHRpb25zOiBhbnkgPSB7fSk6IGFueSB7XG4gIGlmIChvcHRpb25zLnByb3BlcnRpZXMpIHtcbiAgICBPYmplY3Qua2V5cyhvcHRpb25zLnByb3BlcnRpZXMpLmZvckVhY2goKGspID0+IHtcbiAgICAgIGxldCBvcHQ6IGFueSA9IG9wdGlvbnMucHJvcGVydGllc1trXTtcbiAgICAgIGlmICghaXNQbGFpbk9iamVjdChvcHQpKSB7XG4gICAgICAgIG9wdCA9IHsgdHlwZTogb3B0IH07XG4gICAgICB9XG4gICAgICBvcHRpb25zLnByb3BlcnRpZXNba10gPSBvcHQ7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFvcHRpb25zLm1ldGhvZHMpIG9wdGlvbnMubWV0aG9kcyA9IHt9IGFzIGFueTtcbiAgY29uc3QgaW5pdHM6IHsgW2tleTogc3RyaW5nXTogUHJvcGVydHlEZXNjcmlwdG9yIH0gPSB7fTtcbiAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob3B0aW9ucykuZm9yRWFjaCgoaykgPT4ge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9wdGlvbnMsIGspO1xuICAgIGlmICghZGVzYykgcmV0dXJuO1xuICAgIGlmIChOQVRJVkVfTElGRV9DWUNMRVMuaW5kZXhPZihrKSA8IDAgJiYgdHlwZW9mIGRlc2MudmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvcHRpb25zLm1ldGhvZHMsIGssIGRlc2MpO1xuICAgICAgZGVsZXRlIG9wdGlvbnNba107XG4gICAgfSBlbHNlIGlmIChDT01QT05FTlRfTkFUSVZFX1BST1BTLmluZGV4T2YoaykgPCAwKSB7XG4gICAgICBpbml0c1trXSA9IGRlc2M7XG4gICAgfVxuICB9KTtcbiAgaWYgKE9iamVjdC5rZXlzKGluaXRzKS5sZW5ndGgpIHtcbiAgICBjb25zdCBvbGRDcmVhdGVkID0gb3B0aW9ucy5jcmVhdGVkIGFzIGFueTtcbiAgICBvcHRpb25zLmNyZWF0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCBpbml0cyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLXJlc3QtcGFyYW1zXG4gICAgICBpZiAob2xkQ3JlYXRlZCkgb2xkQ3JlYXRlZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIG9wdGlvbnM7XG59XG4iXX0=