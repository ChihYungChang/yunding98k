"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const base_1 = require("../../core/base/base");
const index_1 = require("../../core/decorator/index");
let UBody = class UBody extends base_1.BaseComponent {
    constructor() {
        super(...arguments);
        this.properties = {
            tTop: {
                type: Number,
                value: 0
            },
            bg: {
                type: String,
                value: '#fff'
            },
            auto: {
                type: String,
                value: 'false'
            },
            btn: {
                type: Number,
                value: 0
            },
            load: {
                type: Boolean,
                value: false,
                observer: this.loadOver
            },
            end: {
                type: Boolean,
                value: false,
                observer: this.isEnd
            },
            more: {
                type: Boolean,
                value: false,
                observer: this.isMore
            },
            reHeight: {
                type: Number,
                value: 0
            },
            scroll: {
                type: Boolean,
                value: false
            },
            home: {
                type: Boolean,
                value: false
            },
            theme: {
                type: Boolean,
                value: false,
                observer: this.isTheme
            }
        };
        this.data = {
            title: 'body',
            isIos: false,
            end: this.properties.end,
            more: this.properties.more,
            theme: this.properties.theme,
            threshold: 0,
            screenHeight: 0,
            netShow: false,
            isIpx: false,
            headHeight: 0,
            netStatus: true,
            toTop: 0,
            isLoad: 3,
            y: 0,
            load: this.properties.load
        };
    }
    isEnd(val) {
        this.setData({
            end: val
        });
    }
    isMore(val) {
        this.setData({
            more: val
        });
    }
    isTheme(val) {
        this.setData({
            theme: val
        });
    }
    onEnd() {
        this.triggerEvent('loadmore', {});
    }
    init(then) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const net = yield this.$util.common.networkStatus();
            const netStatus = net.networkType == 'none' ? false : true;
            this.setData({
                ios: this.app.globalData.phoneInfo.isIos,
                netStatus: netStatus,
                netShow: netStatus ? false : true
            }, () => {
                then(netStatus);
            });
        });
    }
    refresh() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this.setData({
                netShow: false
            }, () => {
                const set = setTimeout(() => {
                    this.init(() => {
                        this.data.load == false ? this.triggerEvent('refresh') : '';
                        clearInterval(set);
                    });
                }, 500);
            });
        });
    }
    loadOver(val) {
        wx.nextTick(() => {
            this.setData({
                load: val
            }, () => {
                this.setData({
                    y: val ? -45 : 0,
                    isLoad: val ? 1 : 3
                });
            });
        });
    }
    ready() {
        this.setData({
            screenHeight: this.app.globalData.phoneInfo.screenHeight,
            isIpx: this.app.globalData.phoneInfo.isIpx,
            headHeight: this.app.globalData.phoneInfo.headHeight
        });
    }
    touchMove(e) {
        if (this.data.isLoad >= 3)
            return;
        if (e.detail.y > this.data.threshold) {
            this.setData({
                isLoad: 2
            });
        }
        else {
            this.setData({
                isLoad: 1
            });
        }
    }
    touchEnd() {
        if (this.data.isLoad >= 3)
            return;
        if (this.data.isLoad == 2) {
            this.setData({
                isLoad: 3,
                y: 0
            });
            wx.vibrateShort();
            this.triggerEvent('onRefresh');
        }
        else if (this.data.isLoad == 1) {
            this.setData({
                y: -45
            });
        }
    }
    onScroll(e) {
        this.triggerEvent('scroll', e.detail);
    }
    goTop(tTop) {
        wx.nextTick(() => {
            this.setData({
                toTop: tTop
            });
        });
    }
    onRefresh() {
        this.triggerEvent('onRefresh');
    }
};
UBody = tslib_1.__decorate([
    index_1.WxComponent()
], UBody);
exports.default = UBody;
//# sourceMappingURL=data:application/json;base64,